import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plotter
from datetime import datetime
import argparse
import sys

def generate_resource_graph(execution_data, extractor_function, line_label, x_label, y_label,start_point=0, final_point=None, isRate=False ,axis=None, color='blue', plotgraph=False , figname='fig', output_path='.'):
    
    plotter.close('all')

    first_datapoint = execution_data[0]
    final_datapoint = execution_data[len(execution_data)-1]

    data_timestamp = []
    extracted_data = []
    last_datapoint = None
    current_timestamp = 0
    last_timestamp = 0

    if final_point == None:
        final_point = (final_datapoint['timestamp'] - first_datapoint['timestamp']).total_seconds() + 1

    for datapoint in execution_data:
            
            current_extracted_value = 0

            last_timestamp = current_timestamp

            current_timestamp = (datapoint['timestamp'] - first_datapoint['timestamp']).total_seconds()

            if start_point <= current_timestamp <= final_point:
            
                data_timestamp.append(current_timestamp)

                if isRate:
                    current_extracted_value = extractor_function(datapoint, last_datapoint, current_timestamp-last_timestamp)
                    last_datapoint = datapoint
                else:
                    current_extracted_value = extractor_function(datapoint)
                
                extracted_data.append(current_extracted_value)
    
    if axis == None:

        _, axis = plotter.subplots(ncols=1, nrows=1, constrained_layout=True, figsize=(11,4))
    
    axis.grid(which='major', color='#DDDDDD', linewidth=0.8)
    axis.grid(which='minor', color='#EEEEEE', linestyle=':', linewidth=0.5)

    axis.minorticks_on()

    axis.plot(data_timestamp, extracted_data, label=line_label, color=color)
    axis.set(xlabel=x_label, ylabel=y_label)
    plotter.grid()

    plotter.savefig(f'{output_path}/{figname}.png')

    if plotgraph:
        plotter.show()
    
    return axis


def config():

    parser = argparse.ArgumentParser(prog='rprof-plotter', description='Graph generator for the rprof tool')

    parser.add_argument('-d', '--disk', action='store_true', help='Generate disk usage graphs')
    parser.add_argument('-m', '--memory', action='store_true', help='Generate memory usage graphs')
    parser.add_argument('-c', '--cpu', action='store_true', help='Generate cpu usage graphs')
    parser.add_argument('-i', '--input-dir', help='The directory containing the csv files generated by rprof', required=True)
    parser.add_argument('-o', '--output_dir', help='Directory where the plots will be stored')
    parser.add_argument('-s', '--start_point', default=0, type=int, help='Start time of the plotted graph in seconds, everithing data before this point will be ignored')
    parser.add_argument('-f', '--final_point', type=int, help='Final time of the plotted graph in seconds, everithing data after this point will be ignored')
    parser.add_argument('-t', '--task_start', help='Date and hour the task started. Used to naming resource graphs.')

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)


    args = parser.parse_args()

    if args.output_dir == None:
        args.output_dir = args.input_dir

    return args

#TODO: remove boilerplate

def memus(datapoint):

    return (int(datapoint['data']['pss']))//2 ** 20

def diskreadc(datapoint, last_datapoint, time):

    if last_datapoint is not None:
        first_disk_read = int(last_datapoint['data']['read_count'])
        second_disk_read =  int(datapoint['data']['read_count'])

        return second_disk_read - first_disk_read
    else:
        return 0

def diskreadb(datapoint, last_datapoint, time):

    if last_datapoint is not None:
        first_disk_read = int(last_datapoint['data']['read_bytes'])
        second_disk_read =  int(datapoint['data']['read_bytes'])

        return (second_disk_read - first_disk_read)//2 ** 20
    else:
        return 0

def diskwritec(datapoint, last_datapoint, time):

    if last_datapoint is not None:
        first_disk_write = int(last_datapoint['data']['write_count'])
        second_disk_write =  int(datapoint['data']['write_count'])

        return second_disk_write - first_disk_write
    else:
        return 0

def diskwriteb(datapoint, last_datapoint, time):

    if last_datapoint is not None:
        first_disk_write = int(last_datapoint['data']['write_bytes'])
        second_disk_write =  int(datapoint['data']['write_bytes'])

        return (second_disk_write - first_disk_write)//2 ** 20
    else:
        return 0

def iowait(datapoint, last_datapoint, time):

    if last_datapoint is not None:
        first_iowait = float(last_datapoint['data']['iowait'])
        second_iowait =  float(datapoint['data']['iowait'])

        return second_iowait - first_iowait
    else:
        return 0

def cpuusage(datapoint, last_datapoint, time):

    if last_datapoint is not None:
        first_cpuusage = float(last_datapoint['data']['user'])
        second_cpuusage =  float(datapoint['data']['user'])

        return ((second_cpuusage - first_cpuusage)/time)*100
    else:
        return 0


def structure_data(filename: str):

    data = []

    with open(filename, 'r') as file:

        lines = file.readlines()

        attr = lines.pop(0).strip('\n').split(';')[1:]
        
        for line in lines:

            line_data = {}
            sep_line = line.strip('\n').split(';')
            timestamp = sep_line.pop(0)

            for ind, att in enumerate(attr):
                line_data[f'{att}'] = sep_line[ind]
            
            datapoint = {
                'timestamp': datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S.%f'),
                'data': line_data
            }

            data.append(datapoint)
        
    return data

if __name__ == '__main__':

    args = config()

    data_dir = args.input_dir

    if args.memory:

        data_mem = structure_data(f'{data_dir}/memory.csv')

        generate_resource_graph(data_mem, memus, 'memory usage', 'time(s)', 'Memory Usage(MiB)', start_point=args.start_point, final_point=args.final_point, figname=f'Memory_Usage_{args.task_start}', output_path=args.output_dir)

    if args.disk:

        data_disk = structure_data(f'{data_dir}/disk.csv')

        generate_resource_graph(data_disk, diskreadc, 'disk read operations', 'time(s)', 'Disk reads(nops)', start_point=args.start_point, final_point=args.final_point, isRate=True, output_path=args.output_dir, figname=f'Disk_Read_Ops_{args.task_start}')

        generate_resource_graph(data_disk, diskreadb, 'disk read in MebiBytes', 'time(s)', 'Disk reads(MiB)', start_point=args.start_point, final_point=args.final_point,isRate=True, output_path=args.output_dir, figname=f'Disk_Read_MiB_{args.task_start}')

        generate_resource_graph(data_disk, diskwritec, 'disk write operations', 'time(s)', 'Disk writes(nops)', start_point=args.start_point, final_point=args.final_point,isRate=True, output_path=args.output_dir, figname=f'Disk_Write_Ops_{args.task_start}')

        generate_resource_graph(data_disk, diskwriteb, 'disk write in MebiBytes', 'time(s)', 'Disk writes(MiB)', start_point=args.start_point, final_point=args.final_point,isRate=True, output_path=args.output_dir, figname=f'Disk_Write_MiB_{args.task_start}')

    if args.cpu:

        data_cpu = structure_data(f'{data_dir}/cpu.csv')

        generate_resource_graph(data_cpu, iowait, 'iowait', 'time(s)', 'iowait(s)', start_point=args.start_point, final_point=args.final_point,isRate=True, output_path=args.output_dir, figname=f'Io_Wait_{args.task_start}')

        generate_resource_graph(data_cpu, cpuusage, 'cpu usage', 'time(s)', 'cpu usage(%)', start_point=args.start_point, final_point=args.final_point,isRate=True, output_path=args.output_dir, figname=f'Cpu_Usage_{args.task_start}')
